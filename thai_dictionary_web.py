# thai_dictionary_web.py
import streamlit as st
import wikipedia
import json
from fuzzywuzzy import process
from gtts import gTTS
import base64
import os

wikipedia.set_lang("th")

MEMORY_FILE = "thai_dict_memory.json"
try:
    with open(MEMORY_FILE, "r", encoding="utf-8") as f:
        memory = json.load(f)
except:
    memory = {}

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ =====
def save_memory():
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)

# ===== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° =====
def create_audio(text, filename="output.mp3"):
    tts = gTTS(text=text, lang='th')
    tts.save(filename)
    with open(filename, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()
    return f'<audio controls autoplay><source src="data:audio/mp3;base64,{b64}" type="audio/mp3"></audio>'

# ===== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå =====
def search_word(word):
    if word in memory:
        return f"üìö ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ:\n\n{memory[word]}", memory[word]
    try:
        summary = wikipedia.summary(word, sentences=2)
        return f"üåê ‡∏à‡∏≤‡∏Å Wikipedia:\n\n{summary}", summary
    except:
        close_match, score = process.extractOne(word, memory.keys())
        if score > 80:
            return f"üîç ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á: '{close_match}'\n\n{memory[close_match]}", memory[close_match]
        return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á", None

# ===== UI ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏ü‡∏µ‡πâ‡∏¢‡∏ß‡πÜ =====
st.set_page_config(page_title="üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI", page_icon="üìò", layout="centered")
st.title("üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (V2 ‡πÄ‡∏ü‡∏µ‡πâ‡∏¢‡∏ß‡πÜ)")
st.markdown("---")

query = st.text_input("üîé ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:")

if query:
    st.markdown("------")
    result, definition = search_word(query.strip())
    st.markdown(f"### üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢\n{result}")

    if definition:
        st.markdown("---")
        st.markdown("üéß ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
        audio_html = create_audio(definition)
        st.markdown(audio_html, unsafe_allow_html=True)

    if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" in result:
        new_def = st.text_area("üìù ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:")
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"):
            memory[query.strip()] = new_def.strip()
            save_memory()
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

if st.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    memory = {}
    save_memory()
    st.warning("üî• ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

st.markdown("---")
st.markdown("üë§ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢: Guzz | üí°  ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏î‡∏¢ ChatGPT")